import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms'
import { Product, ProductService } from '../product.service';
import * as ClassicEditor from '@ckeditor/ckeditor5-build-classic';
import { Router } from '@angular/router';

import { CategoryService } from '../../categories/category.service';
import { BrandService } from '../../brands/brand.service';
import { ToastServiceService } from '../../../shared/toast-service.service';
import { environment } from '../../../../../../environments/environment';
import { __values } from 'tslib';
import { NhaCungCapService } from '../../nhacungcaps/nhacungcap.service';

@Component({
  selector: 'app-product',
  templateUrl: './product.component.html',
  styleUrls: ['./product.component.scss']
})
export class ProductComponent implements OnInit {

  public product: Product

  //Begin Review multile file before upload
  public newForm: FormGroup;
  urls = new Array<string>();
  nhacungcaps: any[]=[];
  gopHam(event) {
    this.detectFiles(event)
    this.onSelectFile(event)
  }
  detectFiles(event) {
    this.urls = [];
    let files = event.target.files;
    for (let file of files) {
      let reader = new FileReader();
      reader.onload = (e: any) => {
        this.urls.push(e.target.result);
      }
      reader.readAsDataURL(file);
    }
  }
  onSelectFile(fileInput: any) {
    this.selectedFile = <FileList>fileInput.target.files;
  }
  //End Review multile file before upload
  public Editor = ClassicEditor;
  selectedFile: FileList;


  categories: any[] = [];
  brands: any[] = [];
  constructor(public service: ProductService,
    public http: HttpClient,
    public router: Router,
    public serviceToast: ToastServiceService,
    public serviceCategory: CategoryService,
    public serviceBrand: BrandService,
    public serviceNhaCungCap:NhaCungCapService) {
  }
  onSelectedList() {
    this.router.navigate(['admin/products']);
  }
  get Ten() { return this.newForm.get('Ten'); }
  get GiaBan() { return this.newForm.get('GiaBan'); }
  get GiaNhap() { return this.newForm.get('GiaNhap'); }
  get KhuyenMai() { return this.newForm.get('KhuyenMai'); }
  get MoTa() { return this.newForm.get('MoTa'); }
  get Tag() { return this.newForm.get('Tag'); }
  get HuongDan() { return this.newForm.get('HuongDan'); }
  get ThanhPhan() { return this.newForm.get('ThanhPhan'); }
  get Id_Loai() { return this.newForm.get('Id_Loai'); }
  get Id_NhanHieu() { return this.newForm.get('Id_NhanHieu'); }
  get Id_NhaCungCap() { return this.newForm.get('Id_NhaCungCap'); }
  get TrangThaiSanPham() { return this.newForm.get('TrangThaiSanPham'); }
  get TrangThaiHoatDong() { return this.newForm.get('TrangThaiHoatDong'); }
  get GioiTinh(){return this.newForm.get('GioiTinh')}

  ngOnInit(): void {
    this.serviceCategory.get().subscribe(
      data => {
        Object.assign(this.categories, data)
      }
    )

    this.serviceBrand.get().subscribe(
      data => {
        Object.assign(this.brands, data)
      }
    )
    this.serviceNhaCungCap.gethttp().subscribe(
      data => {
        Object.assign(this.nhacungcaps, data)
        console.log("nha cung cap",this.nhacungcaps);
        
      }
    )
    this.newForm = new FormGroup({

      Ten: new FormControl(null, [
        Validators.required,
        Validators.minLength(2),
        Validators.maxLength(100),


      ]),
      GiaBan: new FormControl(null, [
        Validators.required,
        Validators.min(3),
        Validators.max(100000000000),

      ]),
      GiaNhap: new FormControl(null, [
        Validators.required,
        Validators.min(3),
        Validators.max(100000000000),

      ]),
      KhuyenMai: new FormControl( this.service.product.khuyenMai,[
        Validators.required,
        Validators.min(0),
        Validators.max(50000000000),

      ]),
      MoTa: new FormControl(null, [
        Validators.required,
        Validators.minLength(10),
        Validators.maxLength(10000000000000),


      ]),
      HuongDan: new FormControl(null, [
        Validators.required,
        Validators.minLength(3),
        Validators.maxLength(1000000000000),


      ]),
      ThanhPhan: new FormControl(null, [
        Validators.required,
        Validators.minLength(3),
        Validators.maxLength(5000000000),

      ]),
      Tag: new FormControl(null, [
        Validators.required,
        Validators.minLength(2),
        Validators.maxLength(15),

      ]),
      Id_Loai: new FormControl( null, [
        Validators.required,

      ]),
      Id_NhaCungCap: new FormControl( null, [
        Validators.required,

      ]),
      Id_NhanHieu: new FormControl(null, [
        Validators.required,

      ]),

      TrangThaiSanPham: new FormControl(null, [
        Validators.required,
      ]),
      TrangThaiHoatDong: new FormControl(null, [
        Validators.required,

      ]),
      GioiTinh: new FormControl(null, [
        Validators.required,

      ]),

    });
  }
  clearForm() {
    this.newForm.reset();
  }


  onSubmit = (data) => {
    if (this.service.product.id == 0) {
      let form = new FormData();
      for (let i = 0; i < this.urls.length; i++) {
        form.append('files', this.selectedFile.item(i))
      }
      form.append('Ten', data.Ten);
      form.append('KhuyenMai', data.KhuyenMai);
      form.append('MoTa', data.MoTa);
      form.append('GiaBan', data.GiaBan);
      form.append('GiaNhap', data.GiaNhap);
      form.append('HuongDan', data.HuongDan);
      form.append('ThanhPhan', data.ThanhPhan);
      form.append('Tag', data.Tag);
      form.append('GioiTinh',data.GioiTinh)
      form.append('Id_Loai', data.Id_Loai);
      form.append('Id_NhanHieu', data.Id_NhanHieu);
      form.append('Id_NhaCungCap', data.Id_NhaCungCap);
      form.append('TrangThaiSanPham', data.TrangThaiSanPham);
      form.append('TrangThaiHoatDong', data.TrangThaiHoatDong);
      var json_arr = JSON.stringify(data);
      console.log(json_arr)
      this.service.post(form)
        .subscribe(res => {
          this.serviceToast.showToastThemThanhCong()
          this.resetForm()
          this.service.getAllProducts();
          this.service.product.id = 0;
          this.onSelectedList();
          this.clearForm();
        }, err => {
          this.serviceToast.showToastThemThatBai()
        }
        );
    }
    else {
      const form = new FormData();
      form.append('Ten', data.Ten);
      form.append('KhuyenMai', data.KhuyenMai);
      form.append('MoTa', data.MoTa);
      form.append('GiaBan', data.GiaBan);
      form.append('GiaNhap', data.GiaNhap);
      form.append('GioiTinh',data.GioiTinh)
      form.append('HuongDan', data.HuongDan);
      form.append('ThanhPhan', data.ThanhPhan);
      form.append('Tag', data.Tag);
      form.append('Id_Loai', data.Id_Loai);
      form.append('Id_NhanHieu', data.Id_NhanHieu);
      form.append('Id_NhaCungCap', data.Id_NhaCungCap);
      form.append('TrangThaiSanPham', data.TrangThaiSanPham);
      form.append('TrangThaiSanPhamThietKe', data.TrangThaiSanPhamThietKe);
      for (let i = 0; i < this.urls.length; i++) {
        form.append('files', this.selectedFile.item(i))
      }
      form.append('TrangThaiHoatDong', data.TrangThaiHoatDong);
      this.service.put(this.service.product.id, form)
        .subscribe(res => {
          this.serviceToast.showToastSuaThanhCong()
          this.resetForm()
          this.service.getAllProducts();
          this.service.product.id = 0;
          this.onSelectedList();
          this.clearForm();
        }, err => {
          this.serviceToast.showToastSuaThatBai()
        });

    }
  }
  resetForm() {
    this.newForm.reset();
    this.service.product = new Product();
  }


  /* DATA SAN PHAM */
  TenSanPhamArray:any = [
    {value: '√Åo ba l·ªó', viewValue: '√Åo ba l·ªó'},
    {value: '√Åo thun tr∆°n', viewValue: '√Åo thun tr∆°n'},
    {value: '√Åo kho√°c b√≤ ', viewValue: '√Åo kho√°c b√≤'},
    {value: 'Qu·∫ßn short', viewValue: 'Qu·∫ßn short'},
    {value: 'Qu·∫ßn ƒë√πi', viewValue: 'Qu·∫ßn ƒë√πi'},
    {value: 'Qu·∫ßn kaki ', viewValue: 'Qu·∫ßn kaki'},
    {value: 'Qu·∫ßn baggy', viewValue: 'Qu·∫ßn baggy'},
    {value: '√Åo Polo', viewValue: '√Åo Polo'},
    {value: '√Åo FEAER ', viewValue: '√Åo FEAER'},
    {value: '√Åo s∆° mi', viewValue: '√Åo s∆° mi'},
    {value: '√Åo S∆° Mi Nam ƒê≈©i K·∫ª S·ªçc Caro ', viewValue: '√Åo S∆° Mi Nam ƒê≈©i K·∫ª S·ªçc Caro'},
    {value: '√Åo ph√¥ng tr∆°n unisex nam', viewValue: '√Åo ph√¥ng tr∆°n unisex nam'},
    {value: '√Åo Thun Nam SADBOIZ', viewValue: '√Åo Thun Nam SADBOIZ'},
    {value: '√Åo thun HOTTREND', viewValue: '√Åo thun HOTTREND'},
    {value: '√Åo Thun Nam Th·ªÉ Thao', viewValue: '√Åo Thun Nam Th·ªÉ Thao'},
    {value: '√Åo thun Highclub Basic Tee', viewValue: '√Åo thun Highclub Basic Tee'},
    {value: '√Åo SIGNATURE', viewValue: '√Åo SIGNATURE'},
    {value: '√Åo thun Bad Habits ROCKER', viewValue: '√Åo thun Bad Habits ROCKER'},
    {value: '√Åo s∆° mi tr∆°n big size LADOS ', viewValue: '√Åo s∆° mi tr∆°n big size LADOS '},
    {value: '√Åo Thun Missout BUNNY&BEAR TEE', viewValue: '√Åo Thun Missout BUNNY&BEAR TEE'},
    {value: 'GI√ÄY TH·ªÇ THAO NAM', viewValue: 'GI√ÄY TH·ªÇ THAO NAM'},
    {value: 'Gi√†y th·ªÉ thao n·ªØ CV classic', viewValue: 'Gi√†y th·ªÉ thao n·ªØ CV classic'},
    {value: 'Gi√†y th·ªÉ thao n·ªØ Ulzzang', viewValue: 'Gi√†y th·ªÉ thao n·ªØ Ulzzang'},
    {value: 'GI√ÄY N·ªÆ AIR TR·∫ÆNG', viewValue: 'GI√ÄY N·ªÆ AIR TR·∫ÆNG'},
    {value: 'Gi√†y ùêåùêãùêÅ boston b·∫£n trung', viewValue: 'Gi√†y ùêåùêãùêÅ boston b·∫£n trung'},
    {value: 'Gi√†y AF1 tr·∫Øng', viewValue: 'Gi√†y AF1 tr·∫Øng'},
    {value: '√Åo s∆° mi tay ng·∫Øn nam n·ªØ', viewValue: '√Åo s∆° mi tay ng·∫Øn nam n·ªØ'},
    {value: ' √Åo S∆°mi nhung TƒÉm vintage', viewValue: '√Åo S∆°mi nhung TƒÉm vintage'},
    {value: 'ƒê·ªìng H·ªì Nam PAGINI PA9966 ', viewValue: 'ƒê·ªìng H·ªì Nam PAGINI PA9966 '},
    {value: 'ƒê·ªìng H·ªì N·ªØ Julius H√†n Qu·ªëc', viewValue: 'ƒê·ªìng H·ªì N·ªØ Julius H√†n Qu·ªëc'},
    {value: 'ƒê·ªìng h·ªì WR unisex d√¢y h∆°p kim CS1', viewValue: 'ƒê·ªìng h·ªì WR unisex d√¢y h∆°p kim CS1'},
    {value: 'ƒê·ªìng h·ªì N·ªØ Army', viewValue: 'ƒê·ªìng h·ªì N·ªØ Army'},
    {value: 'ƒê·ªìng H·ªì Nam Crnaira Japan C3079', viewValue: 'ƒê·ªìng H·ªì Nam Crnaira Japan C3079'},
    {value: 'Gi√¢y l∆∞ng th·∫Øt l∆∞ng nam ', viewValue: 'Gi√¢y l∆∞ng th·∫Øt l∆∞ng nam '},
    {value: 'D√¢y N·ªãt Nam M·∫∑t GG', viewValue: 'D√¢y N·ªãt Nam M·∫∑t GG'},
    {value: '√Åo Hoodie', viewValue: '√Åo Hoodie'},
    {value: '√Åo thun Care & Share', viewValue: '√Åo thun Care & Share'}, 
    {value: '√Åo Cotton Compact Prime-Everyday', viewValue: '√Åo Cotton Compact Prime-Everyday'},
    {value: 'Qu·∫ßn Short H√†n Qu·ªëc', viewValue: 'Qu·∫ßn Short H√†n Qu·ªëc'},
    {value: '√Åo kho√°c n·ªØ 3 trong 1', viewValue: '√Åo kho√°c n·ªØ 3 trong 1'}
  ];

  //Data gia nhap
  GiaNhapArray:any = [
    {value: '100000', viewValue: '100000'},
    {value: '157000', viewValue: '157000'},
    {value: '213000', viewValue: '213000'},
    {value: '311000', viewValue: '311000'},
    {value: '900000', viewValue: '900000'},
    {value: '402000', viewValue: '402000'},
    {value: '302000', viewValue: '302000'},
    {value: '450000', viewValue: '450000'},
    {value: '650000', viewValue: '650000'},
    {value: '550000', viewValue: '550000'},
    {value: '350000', viewValue: '350000'},
  ];
  //Data gia ban
  GiaBanArray:any = [
    {value: '150000', viewValue: '150000'},
    {value: '257000', viewValue: '257000'},
    {value: '513000', viewValue: '513000'},
    {value: '411000', viewValue: '411000'},
    {value: '150000', viewValue: '150000'},
    {value: '602000', viewValue: '602000'},
    {value: '650000', viewValue: '650000'},
    {value: '750000', viewValue: '750000'},
    {value: '850000', viewValue: '850000'},
    {value: '650000', viewValue: '650000'},
  ];
  //Data mota
  MoTaArray:any = [
    {value: `Ng√†y n√†y, √°o thun tay l·ª° Unisex form r·ªông ƒëang ng√†y c√†ng tr·ªü n√™n ph·ªï bi·∫øn v√† ƒëa d·∫°ng v·ªõi c√°c m·∫´u thi·∫øt k·∫ø ƒë·ªôc ƒë√°o b·∫Øt m·∫Øt, th·∫≠m ch√≠ c√≤n b·∫Øt k·ªãp nhi·ªÅu tr√†o l∆∞u xu h∆∞·ªõng ƒë·∫∑c bi·ªát l√† phong c√°ch H√†n Qu·ªëc. 
    Do ƒë√≥, vi·ªác t√¨m hi·ªÉu t·∫•t t·∫ßn t·∫≠t v·ªÅ √°o thun tay l·ª° nam/n·ªØ l√† c·∫ßn thi·∫øt gi√∫p b·∫°n lu√¥n c·∫≠p nh·∫≠t nh·ªØng m·∫´u thi·∫øt k·∫ø m·ªõi nh·∫•t. ƒêi·ªÅu n√†y s·∫Ω gi√∫p b·∫°n c√≥ nhi·ªÅu s·ª± l·ª±a ch·ªçn m·ªõi m·∫ª v√† ƒëa d·∫°ng phong c√°ch th·ªùi trang c·ªßa b·∫°n.`,
     viewValue:  `Ng√†y n√†y, √°o thun tay l·ª° Unisex form r·ªông ƒëang ng√†y c√†ng tr·ªü n√™n ph·ªï bi·∫øn v√† ƒëa d·∫°ng v·ªõi c√°c m·∫´u thi·∫øt k·∫ø ƒë·ªôc ƒë√°o b·∫Øt m·∫Øt, th·∫≠m ch√≠ c√≤n b·∫Øt k·ªãp nhi·ªÅu tr√†o l∆∞u xu h∆∞·ªõng ƒë·∫∑c bi·ªát l√† phong c√°ch H√†n Qu·ªëc. 
    Do ƒë√≥, vi·ªác t√¨m hi·ªÉu t·∫•t t·∫ßn t·∫≠t v·ªÅ √°o thun tay l·ª° nam/n·ªØ l√† c·∫ßn thi·∫øt gi√∫p b·∫°n lu√¥n c·∫≠p nh·∫≠t nh·ªØng m·∫´u thi·∫øt k·∫ø m·ªõi nh·∫•t. ƒêi·ªÅu n√†y s·∫Ω gi√∫p b·∫°n c√≥ nhi·ªÅu s·ª± l·ª±a ch·ªçn m·ªõi m·∫ª v√† ƒëa d·∫°ng phong c√°ch th·ªùi trang c·ªßa b·∫°n.`
    },
    {
      value: `M·∫´u qu·∫ßn t√¢y ƒëen c√¥ng s·ªü c·∫°p l∆∞ng cao Form tho·∫£i m√°i, kh√¥ng qu√° √¥m v√† qu√° ƒë·ª©ng d√°ng ƒë√¢u c√°c n√†ng ·∫°, m·∫∑c l√™n v·ª´a tho·∫£i m√°i v·∫≠n ƒë·ªông m√† v·∫´n ƒë·ª©ng d√°ng. C√°c n√†ng c√≥ th·ªÉ m·∫∑c qu·∫ßn t√¢y n·ªØ c√¥ng s·ªü ph·ªëi √°o s∆° mi m·∫∑c ƒëi l√†m, ƒëi ch∆°i, h·ªçc sinh m·∫∑c ƒëi h·ªçc ƒë·ªÅu xinh ·∫°.`, 
    viewValue:  `M·∫´u qu·∫ßn t√¢y ƒëen c√¥ng s·ªü c·∫°p l∆∞ng cao Form tho·∫£i m√°i, kh√¥ng qu√° √¥m v√† qu√° ƒë·ª©ng d√°ng ƒë√¢u c√°c n√†ng ·∫°, m·∫∑c l√™n v·ª´a tho·∫£i m√°i v·∫≠n ƒë·ªông m√† v·∫´n ƒë·ª©ng d√°ng. C√°c n√†ng c√≥ th·ªÉ m·∫∑c qu·∫ßn t√¢y n·ªØ c√¥ng s·ªü ph·ªëi √°o s∆° mi m·∫∑c ƒëi l√†m, ƒëi ch∆°i, h·ªçc sinh m·∫∑c ƒëi h·ªçc ƒë·ªÅu xinh ·∫°.`
  },
  {
    value: `ƒê·ªëi v·ªõi m·ªôt ng∆∞·ªùi ƒë√†n √¥ng hi·ªán ƒë·∫°i th√¨ v·∫ª b·ªÅ ngo√†i r·∫•t quan tr·ªçng, ngo√†i nh·ªØng b·ªô suit l·ªãch l√£m th√¨ ph·ª• ki·ªán ƒë·ªìng h·ªì c≈©ng l√† ƒëi·ªÉm nh·∫•n kh√¥ng th·ªÉ thi·∫øu tr√™n c·ªï tay c·ªßa h·ªç. V√¨ th·∫ø m·ªôt chi·∫øc ƒë·ªìng h·ªì ƒë·∫πp cho nam lu√¥n l√† m·ª•c ƒë√≠ch t√¨m ki·∫øm c·ªßa ƒëa s·ªë ƒë√†n √¥ng hi·ªán nay.`, 
  viewValue:  `ƒê·ªëi v·ªõi m·ªôt ng∆∞·ªùi ƒë√†n √¥ng hi·ªán ƒë·∫°i th√¨ v·∫ª b·ªÅ ngo√†i r·∫•t quan tr·ªçng, ngo√†i nh·ªØng b·ªô suit l·ªãch l√£m th√¨ ph·ª• ki·ªán ƒë·ªìng h·ªì c≈©ng l√† ƒëi·ªÉm nh·∫•n kh√¥ng th·ªÉ thi·∫øu tr√™n c·ªï tay c·ªßa h·ªç. V√¨ th·∫ø m·ªôt chi·∫øc ƒë·ªìng h·ªì ƒë·∫πp cho nam lu√¥n l√† m·ª•c ƒë√≠ch t√¨m ki·∫øm c·ªßa ƒëa s·ªë ƒë√†n √¥ng hi·ªán nay.`
},
{
  value: `Mang ƒë·∫øn h√¨nh ·∫£nh l√† m·ªôt ng∆∞·ªùi l·ªãch l√£m, nh∆∞ng kh√¥ng k√©m ph·∫ßn thanh l·ªãch, th·ªùi trang gi√†y n·ªïi b·∫≠t c√πng d√°ng x·ªè ti·ªán l·ª£i gi√∫p b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ·ªü b·∫•t c·ª© ƒë√¢u.`, 
viewValue:  `Mang ƒë·∫øn h√¨nh ·∫£nh l√† m·ªôt ng∆∞·ªùi l·ªãch l√£m, nh∆∞ng kh√¥ng k√©m ph·∫ßn thanh l·ªãch, th·ªùi trang gi√†y n·ªïi b·∫≠t c√πng d√°ng x·ªè ti·ªán l·ª£i gi√∫p b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ·ªü b·∫•t c·ª© ƒë√¢u.`
},
  ];
  //Data thanh phan
  ThanhPhanArray:any = [
    {value: `V·∫£i Thun L·∫°nh co gi√£n 4 chi·ªÅu, tho√°ng m√°t, m·ªÅm m·ªãn m√°t m·∫ª, ph√π h·ª£p v·ªõi m·ªçi ho·∫°t ƒë·ªông d√£ ngo·∫°i, th·ªÉ thao, hay d·∫°o ph·ªë.`,
     viewValue:  `V·∫£i Thun L·∫°nh co gi√£n 4 chi·ªÅu, tho√°ng m√°t, m·ªÅm m·ªãn m√°t m·∫ª, ph√π h·ª£p v·ªõi m·ªçi ho·∫°t ƒë·ªông d√£ ngo·∫°i, th·ªÉ thao, hay d·∫°o ph·ªë.`
    },
    {value: `Th√¢n gi√†y th·ªÉ thao ch·ªß y·∫øu s·ª≠ d·ª•ng v·∫≠t li·ªáu mesh (l∆∞·ªõi), da t·ª± nhi√™n ho·∫∑c da nh√¢n t·∫°o. `,
     viewValue:  `Th√¢n gi√†y th·ªÉ thao ch·ªß y·∫øu s·ª≠ d·ª•ng v·∫≠t li·ªáu mesh (l∆∞·ªõi), da t·ª± nhi√™n ho·∫∑c da nh√¢n t·∫°o. `
    },
    {value: `Kaki `,
    viewValue:  `Kaki  `
   },
   {value: `Kim lo·∫°i`,
   viewValue:  `Kim lo·∫°i `
  },
  ];

  //Data Huong dan
  HuongDanArray:any = [
    {value: `·ª¶i 180 ƒë·ªô, c√≥ th·ªÉ ph·ªëi v·ªõi m·ªçi lo·∫°i ƒë·ªì`,
     viewValue:  `·ª¶i 180 ƒë·ªô, c√≥ th·ªÉ ph·ªëi v·ªõi m·ªçi lo·∫°i ƒë·ªì`
    },
    {value: `ƒê·ªÉ ·ªü n∆°i tho√°ng m√°t, tr√°nh ·∫©m m·ªëc`,
    viewValue:  `ƒê·ªÉ ·ªü n∆°i tho√°ng m√°t, tr√°nh ·∫©m m·ªëc`
   },
  ];
}


